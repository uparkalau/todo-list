
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">
    <title>To-Do List</title>
</head>
<body>
    <div id="themeSwitchContainer">
        <button id="themeToggle" class="theme-toggle-btn">
            <i id="themeIcon" class="bi bi-sun"></i>
        </button>
    </div>
    <div id="menu">
        <input type="text" id="searchInput" placeholder="Search tasks...">
        <div id="taskListsContainer"></div>
        <button id="createTaskList">Create Task List</button>
    </div>
    <div id="taskListView">
        <button id="backToLists">Back to Lists</button>
        <div id="progressContainer">
            <div id="progressBar"></div>
            <div id="progressText"></div>
        </div>
        <ul id="taskList"></ul>
        <input type="text" id="userInput" placeholder="New task...">
        <button id="enter">Add Task</button>
    </div>
    <script src="js/task.js"></script>
    <script src="js/taskList.js"></script>
    <script src="js/taskManager.js"></script>
    <script src="js/taskView.js"></script>
    <script src="js/app.js"></script>
</body>
</html>
//todo-list\js\app.js
class TodoApp {
    constructor() {
        this.taskManager = new TaskManager();
        this.taskList = null;
        this.taskView = null;
        this.enterButton = document.getElementById("enter");
        this.input = document.getElementById("userInput");
        this.createTaskListButton = document.getElementById("createTaskList");
        this.searchInput = document.getElementById("searchInput");
        this.taskListsContainer = document.getElementById("taskListsContainer");
        this.taskListView = document.getElementById("taskListView");
        this.backToListsButton = document.getElementById("backToLists");
        this.themeToggle = document.getElementById("themeToggle");
        this.themeIcon = document.getElementById("themeIcon");

        this.createTaskListButton.addEventListener("click", this.createTaskList.bind(this));
        this.searchInput.addEventListener("input", this.searchTasks.bind(this));
        this.backToListsButton.addEventListener("click", this.showTaskLists.bind(this));
        this.enterButton.addEventListener("click", this.addTask.bind(this));
        this.input.addEventListener("keypress", this.addTaskOnEnter.bind(this));
        this.themeToggle.addEventListener("click", this.toggleTheme.bind(this));

        this.loadTheme();
        this.showTaskLists();
    }

    createTaskList() {
        const name = prompt("Enter the name of the new task list:");
        if (name) {
            const taskList = new TaskList(name);
            this.taskManager.addTaskList(taskList);
            this.showTaskLists();
        }
    }

    showTaskLists() {
        this.taskListsContainer.innerHTML = '';
        this.taskListView.style.display = 'none';
        this.taskListsContainer.style.display = 'block';

        this.taskManager.getTaskLists().forEach(taskList => {
            const div = document.createElement("div");
            div.classList.add("task-list-tile");
            div.textContent = taskList.name;
            div.addEventListener("click", () => this.showTaskList(taskList.id));
            this.taskListsContainer.appendChild(div);
        });
    }

    showTaskList(id) {
        console.log("Selected Task List ID:", id);
        const taskList = this.taskManager.getTaskLists().find(taskList => taskList.id === id);
        if (taskList) {
            console.log("Found Task List:", taskList);
            this.taskList = taskList;
            this.taskView = new TaskView(this.taskList);
            this.taskListsContainer.style.display = 'none';
            this.taskListView.style.display = 'block';
            this.taskView.render();
        } else {
            console.log("Task List not found");
        }
    }
    

    addTask() {
        if (this.input.value.trim()) {
            const task = new Task(this.input.value);
            this.taskList.addTask(task);
            this.input.value = '';
            this.taskView.render();
        }
    }

    addTaskOnEnter(event) {
        if (event.key === 'Enter' && this.input.value.trim()) {
            this.addTask();
        }
    }

    searchTasks() {
        const query = this.searchInput.value;
        const results = this.taskManager.searchTasks(query);
        this.taskListsContainer.innerHTML = '';

        results.forEach(result => {
            const div = document.createElement("div");
            div.classList.add("search-result");
            div.textContent = result.task ? `${result.taskList}: ${result.task}` : `${result.taskList}`;
            div.addEventListener("click", () => {
                const taskList = this.taskManager.getTaskLists().find(tl => tl.name === result.taskList);
                if (taskList) {
                    this.showTaskList(taskList.id);
                }
            });
            this.taskListsContainer.appendChild(div);
        });
    }

    toggleTheme() {
        document.body.classList.toggle('dark-theme');
        const isDark = document.body.classList.contains('dark-theme');
        this.themeIcon.className = isDark ? 'bi bi-moon' : 'bi bi-sun';
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }

    loadTheme() {
        const theme = localStorage.getItem('theme');
        if (theme === 'dark') {
            document.body.classList.add('dark-theme');
            this.themeIcon.className = 'bi bi-moon';
        } else {
            this.themeIcon.className = 'bi bi-sun';
        }
    }
}

// Initialize the app
new TodoApp();


//js\task.js
class Task {
  constructor(text, done = false) {
    this.id = Date.now(); // Unique ID based on timestamp
    this.text = text;
    this.done = done;
  }
}

//js\taskList.js
class TaskList {
    constructor(name) {
        this.id = Date.now(); // Unique ID based on timestamp
        this.name = name;
        this.tasks = [];
    }

    addTask(task) {
        this.tasks.push(task);
        this.saveTasks();
    }

    deleteTask(id) {
        this.tasks = this.tasks.filter(task => task.id !== id);
        this.saveTasks();
    }

    editTask(id, newText) {
        const task = this.tasks.find(task => task.id === id);
        if (task) {
            task.text = newText;
            this.saveTasks();
        }
    }

    toggleTaskDone(id) {
        const task = this.tasks.find(task => task.id === id);
        if (task) {
            task.done = !task.done;
            this.saveTasks();
        }
    }

    saveTasks() {
        const taskLists = JSON.parse(localStorage.getItem('taskLists')) || [];
        const taskListIndex = taskLists.findIndex(tl => tl.id === this.id);
        if (taskListIndex > -1) {
            taskLists[taskListIndex] = this;
        } else {
            taskLists.push(this);
        }
        localStorage.setItem('taskLists', JSON.stringify(taskLists));
    }

    getTasks() {
        return this.tasks;
    }

    getCompletedTasks() {
        return this.tasks.filter(task => task.done).length;
    }
}

//js\taskManager.js
class TaskManager {
    constructor() {
        this.taskLists = JSON.parse(localStorage.getItem('taskLists')) || [];
    }

    addTaskList(taskList) {
        taskList.id = Date.now(); // Assign a unique ID based on timestamp
        this.taskLists.push(taskList);
        this.saveTaskLists();
    }

    deleteTaskList(id) {
        this.taskLists = this.taskLists.filter(taskList => taskList.id !== id);
        this.saveTaskLists();
    }

    getTaskLists() {
        return this.taskLists.map(taskList => {
            const newTaskList = new TaskList(taskList.name);
            newTaskList.tasks = taskList.tasks.map(task => new Task(task.text, task.done));
            newTaskList.id = taskList.id; // Ensure the ID is preserved
            return newTaskList;
        });
    }    

    saveTaskLists() {
        localStorage.setItem('taskLists', JSON.stringify(this.taskLists));
    }

    searchTasks(query) {
        const results = [];
        this.taskLists.forEach(taskList => {
            if (taskList.name.toLowerCase().includes(query.toLowerCase())) {
                results.push({ taskList: taskList.name, task: '' });
            }
            taskList.tasks.forEach(task => {
                if (task.text.toLowerCase().includes(query.toLowerCase())) {
                    results.push({ taskList: taskList.name, task: task.text });
                }
            });
        });
        return results;
    }
}
js\taskView.js
class TaskView {
    constructor(taskList) {
        this.taskList = taskList;
        this.ul = document.getElementById("taskList");
        this.progressBar = document.getElementById("progressBar");
        this.progressText = document.getElementById("progressText");
        this.progressContainer = document.getElementById("progressContainer");
    }

    render() {
        this.ul.innerHTML = '';
        this.taskList.getTasks().forEach(task => {
            const li = document.createElement("li");
            const taskText = task.text.length > 30 ? task.text.substring(0, 30) + '...' : task.text;
            li.appendChild(document.createTextNode(taskText));
            li.title = task.text; // Tooltip with full text
            if (task.done) {
                li.classList.add("done");
            }
            this.ul.appendChild(li);

            li.addEventListener("click", () => this.toggleTaskDone(task.id));
            li.addEventListener("dblclick", () => this.editTask(task.id));
            this.addDeleteButton(li, task.id);
        });
        this.updateProgressBar();
    }

    addDeleteButton(li, id) {
        const dBtn = document.createElement("button");
        dBtn.innerHTML = '<i class="bi bi-trash"></i>';
        dBtn.classList.add("delete-btn");
        li.appendChild(dBtn);

        dBtn.addEventListener("click", () => {
            this.taskList.deleteTask(id);
            this.render();
        });
    }

    toggleTaskDone(id) {
        this.taskList.toggleTaskDone(id);
        this.render();
    }

    editTask(id) {
        const task = this.taskList.getTasks().find(task => task.id === id);
        const newText = prompt("Edit your task:", task.text);
        if (newText) {
            this.taskList.editTask(id, newText);
            this.render();
        }
    }

    updateProgressBar() {
        const totalTasks = this.taskList.getTasks().length;
        const completedTasks = this.taskList.getCompletedTasks();
        const progress = totalTasks === 0 ? 0 : (completedTasks / totalTasks) * 100;
        this.progressBar.style.width = `${progress}%`;
        this.progressText.textContent = `${Math.round(progress)}%`;

        if (totalTasks === 0) {
            this.progressContainer.style.display = 'none';
        } else {
            this.progressContainer.style.display = 'block';
        }
    }
    
}

//css\style.css
/* Primary Colors */
:root {
  --primary-color: #f5f5f5; /* Light Grey */
  --primary-dark-color: #333333; /* Dark Grey */
  --accent-color: #ff6f61; /* Coral */
  --accent-dark-color: #ff3b30; /* Dark Coral */
  --text-color: #333333; /* Dark Text */
  --text-light-color: #ffffff; /* Light Text */
}

/* Dark Theme Colors */
body.dark-theme {
  --primary-color: #333333; /* Dark Grey */
  --primary-dark-color: #f5f5f5; /* Light Grey */
  --text-color: #f5f5f5; /* Light Text */
  --text-light-color: #333333; /* Dark Text */
}

body {
  background-color: var(--primary-color);
  color: var(--text-color);
  font-family: 'Open Sans', sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  height: 100vh;
  transition: background-color 0.3s, color 0.3s;
}

#themeSwitchContainer {
  position: absolute;
  top: 10px;
  right: 10px;
}

.theme-toggle-btn {
  background-color: transparent;
  border: none;
  cursor: pointer;
  font-size: 24px;
  color: var(--accent-color);
}

.theme-toggle-btn:hover {
  color: var(--accent-dark-color);
}

#menu {
  width: 250px;
  border-right: 1px solid var(--primary-dark-color);
  padding: 10px;
  background-color: var(--primary-color);
}

#taskListView {
  flex-grow: 1;
  padding: 10px;
  display: none;
}

.task-list-tile, .search-result {
  padding: 10px;
  border: 1px solid var(--primary-dark-color);
  margin-bottom: 5px;
  cursor: pointer;
  background-color: var(--accent-color);
  color: var(--text-light-color);
  border-radius: 5px;
  transition: background-color 0.3s, transform 0.3s;
}

.task-list-tile:hover, .search-result:hover {
  background-color: var(--accent-dark-color);
  transform: scale(1.02);
}

input {
  border-radius: 5px;
  width: 100%;
  padding: 10px;
  border: 2px solid var(--primary-dark-color);
  margin-bottom: 10px;
  transition: border-color 0.3s;
}

input:focus {
  outline: none;
  border-color: var(--accent-color);
}

button {
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  color: var(--text-light-color);
  background-color: var(--accent-color);
  transition: background-color 0.3s, color 0.3s;
  font-weight: bold;
  cursor: pointer;
  margin: 5px;
}

button:hover {
  background-color: var(--accent-dark-color);
}

#backToLists {
  background-color: transparent;
  color: var(--accent-color);
}

#backToLists:hover {
  background-color: transparent;
  color: var(--accent-dark-color);
}

#progressContainer {
  width: 100%;
  background-color: var(--primary-dark-color);
  border-radius: 5px;
  margin: 20px 0;
  position: relative;
}

#progressBar {
  width: 0;
  height: 20px;
  background-color: var(--accent-color);
  border-radius: 5px;
  transition: width 0.3s;
}

#progressText {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  color: var(--text-light-color);
  font-weight: bold;
}

ul {
  list-style: none;
  padding: 0;
  width: 100%;
}

li {
  background-color: var(--accent-color);
  color: var(--text-light-color);
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: background-color 0.3s, transform 0.3s;
  position: relative;
}

li:hover {
  background-color: var(--accent-dark-color);
  transform: scale(1.02);
}

li.done {
  background-color: var(--primary-dark-color);
  text-decoration: line-through;
}

.delete-btn {
  color: var(--text-light-color);
  cursor: pointer;
  font-size: 1.2em;
}

.delete-btn:hover {
  color: var(--accent-dark-color);
}

@media (max-width: 600px) {
  input {
    width: 90%;
  }
}
